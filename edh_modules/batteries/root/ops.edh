
  operator &> (callerScope, lhe, rhe) {
    case callerScope.eval(lhe) of {
      nil -> { return nil }
      { lhv } -> if null(lhv) then { return lhv }
    }
    callerScope.eval(rhe)
  }

  operator |> (callerScope, lhe, rhe) {
    case callerScope.eval(lhe) of {
      nil -> { pass }
      { lhv } -> if not null(lhv) then { return lhv }
    }
    callerScope.eval(rhe)
  }

  operator += (callerScope, lhe, rhe) {
    callerScope.eval(makeOp(
      lhe, "=", makeOp(lhe, "+", rhe)
    ))
  }

  operator -= (callerScope, lhe, rhe) {
    callerScope.eval(makeOp(
      lhe, "=", makeOp(lhe, "-", rhe)
    ))
  }

  operator *= (callerScope, lhe, rhe) {
    callerScope.eval(makeOp(
      lhe, "=", makeOp(lhe, "*", rhe)
    ))
  }

  operator /= (callerScope, lhe, rhe) {
    callerScope.eval(makeOp(
      lhe, "=", makeOp(lhe, "/", rhe)
    ))
  }
